---

- name: Add the KERBEROS Service to cluster
  command: "curl -H \"X-Requested-By:ambari\" -u admin:admin -i -X POST http://{{ ambari_server }}:8080/api/v1/clusters/{{ cluster_name }}/services/KERBEROS"
  when: True

- name: Add the KERBEROS_CLIENT component to the KERBEROS service
  command: "curl -H \"X-Requested-By:ambari\" -u admin:admin -i -X POST http://{{ ambari_server }}:8080/api/v1/clusters/{{ cluster_name }}/services/KERBEROS/components/KERBEROS_CLIENT"
  when: True

- name: Create the KERBEROS_CLIENT host components
  command: "curl -H \"X-Requested-By:ambari\" -u admin:admin -i -X POST -d '{\"host_components\":[{\"HostRoles\":{\"component_name\":\"KERBEROS_CLIENT\"}}]}' http://{{ ambari_server }}:8080/api/v1/clusters/{{ cluster_name }}/hosts?Hosts/host_name={{ item }}.{{ domain_name }}"
  with_items:
    - "{{ groups['hadoop'] }}"
  when: True

- name: Install the KERBEROS service and components
  command: "curl -H \"X-Requested-By:ambari\" -u admin:admin -i -X PUT -d '{\"ServiceInfo\":{\"state\":\"INSTALLED\"}}' http://{{ ambari_server }}:8080/api/v1/clusters/{{ cluster_name }}/services/KERBEROS"
  when: True

- name: Stop all services
  command: "curl -H \"X-Requested-By:ambari\" -u admin:admin -i -X PUT -d '{\"RequestInfo\":{\"context\":\"Stop Service\"},\"Body\":{\"ServiceInfo\":{\"state\":\"INSTALLED\"}}}' http://{{ ambari_server }}:8080/api/v1/clusters/{{ cluster_name }}/services"
  when: True

- name: Check progress
  command: "curl -H \"X-Requested-By: ambari\" -u admin:admin -X GET http://{{ ambari_server }}:8080/api/v1/clusters/{{ cluster_name }}/requests?fields=Requests/progress_percent"
  retries: 10
  delay: 10

- name: Copy KERBEROS service configurations
  template: src=kerberos/kerberos-service-configuration.json.j2 dest=/tmp/kerberos-service-configuration.json
  when: True

- name: Create and set KERBEROS service configurations
  command: "curl -H \"X-Requested-By:ambari\" -u admin:admin -i -X PUT -d '@/tmp/kerberos-service-configuration.json' http://{{ ambari_server }}:8080/api/v1/clusters/{{ cluster_name }}"
  when: True

- name: Copy Kerberos Descriptor
  template: src=kerberos/kerberos-descriptor.json.j2 dest=/tmp/kerberos-descriptor.json
  when: True

- name: Delete the Kerberos Descriptor
  command: "curl -H \"X-Requested-By:ambari\" -u admin:admin -i -X DELETE http://{{ ambari_server }}:8080/api/v1/clusters/{{ cluster_name }}/artifacts/kerberos_descriptor"
  when: True

- name: Set the Kerberos Descriptor
  command: "curl -H \"X-Requested-By:ambari\" -u admin:admin -i -X POST -d'@/tmp/kerberos-descriptor.json' http://{{ ambari_server }}:8080/api/v1/clusters/{{ cluster_name }}/artifacts/kerberos_descriptor"
  when: True

- name: Copy KDC administrator credentials
  template: src=kerberos/kerberos-credentials.json.j2 dest=/tmp/kerberos-credentials.json
  when: true

- name: Set the KDC administrator credentials
  command: "curl -H \"X-Requested-By:ambari\" -u admin:admin -i -X PUT -d'@/tmp/kerberos-credentials.json' http://{{ ambari_server }}:8080/api/v1/clusters/{{ cluster_name }}"
  when: true

- name: Copy Enable Kerberos
  template: src=kerberos/kerberos.json.j2 dest=/tmp/kerberos.json
  when: True

- name: Enable Kerberos
  command: "curl -H \"X-Requested-By:ambari\" -u admin:admin -i -X PUT -d'@/tmp/kerberos.json' http://{{ ambari_server }}:8080/api/v1/clusters/{{ cluster_name }}"
  when: True

- name: Check progress
  command: "curl -H \"X-Requested-By: ambari\" -u admin:admin -X GET http://{{ ambari_server }}:8080/api/v1/clusters/{{ cluster_name }}/requests?fields=Requests/progress_percent"
  register: result
  until: result.stdout | regex_search('\"progress_percent\"\\s+:\\s+(100.0)')
  retries: 10
  delay: 10

- name: Start all services
  command: "curl -H \"X-Requested-By:ambari\" -u admin:admin -i -X PUT -d '{\"ServiceInfo\":{\"state\":\"STARTED\"}' http://{{ ambari_server }}:8080/api/v1/clusters/{{ cluster_name }}/services"
  when: True

- name: Check progress
  command: "curl -H \"X-Requested-By: ambari\" -u admin:admin -X GET http://{{ ambari_server }}:8080/api/v1/clusters/{{ cluster_name }}/requests?fields=Requests/progress_percent"
  register: result
  until: result.stdout | regex_search('\"progress_percent\"\\s+:\\s+(100.0)')
  retries: 10
  delay: 10